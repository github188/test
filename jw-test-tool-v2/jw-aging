#!/bin/bash
###############################################################################
# Author : liyunteng
# Email : li_yunteng@163.com
# Created Time : 2014-07-01 17:49
# Filename : jw-aging.sh
# Description : v0.3
###############################################################################
VERSION="1.3"
iperf_tmp="/tmp/iperf"
dd_tmp="/tmp/dd"
net_speed_limit=100
IO_MEM_DIR="/mnt/tmpfs"
ERROR_STATUS_FILE="/var/log/jw-aging"
aging_refresh_time=10
nowtime='date +"%Y/%m/%d %H:%M:%S"'

Product_num=`dmidecode -s baseboard-product-name`
case $Product_num in
    "1001")
        Product_name="SYS-6026B-T(2U-B75)"
        Eth_num=2
        Disk_num=8
        Hwtype="2U8-B75"
        ;;
    "1002")
        Product_name="SYS-6026N-T(2U-ATOM)"
        Eth_num=2
        Disk_num=8
        Hwtype="2U8-ATOM"
        ;;
    "1003")
        Product_name="SYS-6036B-T(3U-SIMPLE)"
        Eth_num=2
        Disk_num=16
        Hwtype="3U16-SIMPLE"
        ;;
    "1004")
        Product_name="SYS-6036C-T(3U-C216)"
        Eth_num=5
        Disk_num=16
        Hwtype="3U16-STANDARD"
        ;;
    "1005")
        Product_name="SYS-6036Z-T(3U-Z77)"
        Eth_num=2
        Disk_num=16
        Hwtype="3U16-STANDARD"
        ;;
    "1006")
        Product_name="SYS-6036C-S(3U-C216)"
        Eth_num=5
        Disk_num=16
        Hwtype="3U16-STANDARD-SAS"
        ;;
    "1007")
        Product_name="SYS-6036Z-S(3U-Z77)"
        Eth_num=2
        Disk_num=16
        Hwtype="3U16-STANDARD-SAS"
        ;;
    "1011")
        Product_name="CMS1100G2"
        Eth_num=2
        Disk_num=16
        Hwtype="haswell"
        ;;
    *)
        Product_name="Unknown"
        Eth_num=0
        Disk_num=0
        Hwtype="Unknown"
        ;;
esac


get_ip()
{
    ifconfig eth0 |grep "inet addr"|awk -F : '{print $2}'|tr -d [:alpha:]
}


system_info() {
    #Date=`date +"%Y/%m/%d %H:%M:%S"`
    #Hostname=`hostname`
    #Kernel_version=`uname -r`
    #Pic_version=`pic-version`
    #echo -e "Date: $Date"
    #echo -e "Host name: $Hostname"
    #echo -e "Kernel version: $Kernel_version"
    #echo -e "Mcu firmware version: $Pic_version"
    #echo -e "Hardware type: $Hwtype"
    echo -e "$Product_name"

    #pids=`ps axu|grep "iperf -s -l"|grep -v grep|awk '{print $2}'`
    #if [ "x$pids" = "x" ]; then
    #	iperf -s  -l 100000 > /dev/null 2>&1 &
    #fi
}

bios_info() {
    echo -e "Vendor: `dmidecode -s bios-vendor`"
    echo -e "Version: `dmidecode -s bios-version`"
    echo -e "Release Date: `dmidecode -s bios-release-date`"
}

cpu_info() {
    echo -e "`dmidecode -s processor-version`"
}

chipset_info(){
    echo -e "`lspci|grep "ISA bridge" |awk -F : '{print $3}'|sed 's/^[ \t]*//g'`"
}

memory_info(){
    mem_info=`dmidecode -t memory`
    mem_manufacturer=(`echo "$mem_info"|grep Manufacturer|awk -F : '{print $2}'`)
    mem_type=(`echo "$mem_info"|grep Type|grep -v "Type Detail"| grep -v "Error Correction Type"|awk -F : '{print $2}'`)
    mem_speed=(`echo "$mem_info"|grep Speed|grep -v "Configured Clock Speed"|awk -F : '{print $2}'|awk '{print $1}'`)
    mem_size=(`echo "$mem_info"|grep Size|awk -F : '{print $2}'|awk '{print $1}'`)
    mem_locator=(`echo "$mem_info"|grep Locator|grep -v "Bank Locator"|awk -F : '{print $2}'`)


    for ((i=0; i<${#mem_manufacturer[@]}; i++))
    do
        if [ "x${mem_manufacturer[$i]}" != "x[Empty]" ];then
            echo -e "${mem_manufacturer[$i]} ${mem_type[$i]} ${mem_speed[$i]} MHz ${mem_size[$i]} MB ${mem_locator[$i]}"
        fi
    done
}

eth_info(){
    Ethernet_num=`lspci|grep Ethernet|wc -l`

    for ((i=1; i<=$Ethernet_num; i++))
    do
        eth_name=`lspci|grep Ethernet|awk -F : '{print $3}'|sed -n ${i}p|sed 's/^[ \t]//g'`
        if [ "x$eth_name" != "x" ];then
            echo -e "$eth_name"
        else
            echo -e "Unknown"
        fi
    done

    if [ $Eth_num -gt $Ethernet_num ]; then
        i=$Eth_num-$Ethernet_num
        for ((;i>0; i--))
        do
            echo -e "Null"
        done
    fi

}

sata_info(){
    Sata_controller_num=`lspci|grep "SATA controller"|wc -l`
    for ((i=1; i<=$Sata_controller_num; i++))
    do
        echo -e "`lspci|grep "SATA controller"|awk -F : '{print $3}'|sed -n ${i}p|sed 's/^[ \t]//g'`"
    done
}

#hardware monitor
monitor_test() {
    hwmon=`sys-mon-shell`
    cpu_temp=`echo "$hwmon"|sed -n 13p|awk '{print $1}'`
    chassis_temp=`echo "$hwmon"|sed -n 13p |awk '{print $2}'`
    fan1_speed=`echo "$hwmon"|sed -n 13p|awk '{print $4}'`
    fan2_speed=`echo "$hwmon"|sed -n 13p|awk '{print $5}'`

    echo -e "$cpu_temp $chassis_temp $fan1_speed $fan2_speed"
}


#buzzer
buzzer_test() {
    if [ "$1" = "on" ]; then
        touch /tmp/.jw-aging.buzzer
    else
        rm -rf /tmp/.jw-aging.buzzer
    fi

    buzzer-ctl -s $1
}


#sys led
sysled_test() {
    if [ "$1" = "on" ]; then
        touch /tmp/.jw-aging.sysled
    else
        rm -rf /tmp/.jw-aging.sysled
    fi

    if [ "$Hwtype" = "3U16-STANDARD-SAS" ]; then
        sas_sysled $1
    else
        led-ctl -s $1
    fi
}

#disk led
diskled_test() {
    if [ "$1" = "on" ]; then
        touch /tmp/.jw-aging.led
    else
        rm -rf /tmp/.jw-aging.led
    fi

    led-ctl -d $1 -i all
}
sound_test()
{
    if [ "$1" = "start" ];then
	unity-control-center sound &
    else
	pid=`ps aux|grep "unity-control-center sound"|grep -v grep|awk '{print $2}'`
	kill -9 $pid
    fi
}

net_info()
{

    for ((i=0; i<$Eth_num; i++))
    do
        result=`ethtool eth$i 2>/dev/null |grep Speed|awk '{print $2}'|tr -d "Mb/s"`
        if [ "x$result" = "x" ] ; then
            echo -e "Null"
        else
            echo -e $result
        fi
    done
}



#net 未完成
net_test()
{
    if [ "x$1" = "x" ]; then
        return
    fi

    if [ "x$1" = "xinfo" ]; then
        net_info
    else
        net_speed_test $1 $2
    fi
}

disk_test()
{
    if [ "x$1" = "xinfo" ];then
        disks=`disk --list`
        #	if [ "$Hwtype" = "3U16-STANDARD-SAS" ]; then
        #		if [ x"$disks" = "x" ]; then
        #			echo -e "Null"
        #			return
        #		fi
        #		echo "$disks"| while read disk
        #		do
        #			slot_dev_true=`echo "$disk"|awk -F \/ '{print $3}'|tr -d \"`
        #			if `dd if=/dev/$slot_dev_true of=/dev/null bs=1M count=1 >/dev/null 2>&1` && `dd if=/dev/zero of=/dev/$slot_dev_true bs=1M count=1 > /dev/null 2>&1`; then
        #				echo -e "$slot_dev_true"
        #			else
        #				echo -e "Bad"
        #			fi
        #
        #		done
        #		for ((i=1; i<=$Disk_num; i++))
        #		do
        #			echo -e "Null"
        #		done
        #	else
        for ((i=1; i<=$Disk_num; i++))
        do
            slot_info=`echo "$disks"|grep "0:$i\""`
            if [ -n "$slot_info" ]; then
                slot_dev=`echo $slot_info|awk '{print $2}'|awk -F : '{print $2}'|tr -d "\""`
                slot_dev_true=`echo $slot_dev|awk -F / '{print $3}'|tr -d "\""`

                if `dd if=/dev/$slot_dev_true of=/dev/null bs=1M count=1 >/dev/null 2>&1` && `dd if=/dev/zero of=/dev/$slot_dev_true bs=1M count=1 > /dev/null 2>&1`; then
                    echo -e "$slot_dev_true"
                else
                    echo -e "Bad"
                fi

            else
                echo -e  "Null"
            fi
        done
        #	fi
    fi
    if [ "x$1" = "xspeed" ];then
        killall dd > /dev/null 2>&1
        sync

        file=/tmp/disk_speed.sh

        #if [ "$Hwtype" = "3U16-STANDARD-SAS" ]; then
        #		cat <<EOF >$file
        #!/bin/bash
        #rm -rf /tmp/dd
        #rm -rf /tmp/disk_speed
        #disks=\`disk\`
        #echo "\$disks"| while read disk
        #do
        #	dev=\`echo \$disk|awk -F : '{print \$4}'|tr -d \\"\`
        #	if [ "x\$dev" = "x" ];then
        #		echo -e "Null Null" >> /tmp/disk_speed
        #		continue
        #	else
        #		sleep 2
        #		dd if=\$dev of=/dev/null bs=4096 > /dev/null 2>&1 &
        #	fi
        #
        #	iostat -m  3 2 > $dd_tmp  2>&1 &
        #	sleep 7
        #	killall  dd >/dev/null 2>&1
        #
        #	dev_base=\`basename \$dev\`
        #	disk_read_speed=\`cat $dd_tmp | grep \$dev_base|sed -n 2p|awk '{print \$3}'|awk -F . '{print \$1}'\`
        #
        #	sleep 2
        #	dd if=/dev/zero of=\$dev bs=4096 > /dev/null 2>&1 &
        #
        #	iostat -m  3 2 > $dd_tmp  2>&1 &
        #	sleep 7
        #	killall dd >/dev/null 2>&1
        #
        #	disk_write_speed=\`cat $dd_tmp | grep \${dev_base}|sed -n 2p|awk '{print \$4}'|awk -F . '{print \$1}'\`
        #	echo  "\$disk_read_speed \$disk_write_speed" >> /tmp/disk_speed
        #done
        #EOF
        #
        #else
        cat <<EOF >$file
#!/bin/bash
rm -rf /tmp/dd
rm -rf /tmp/disk_speed
disks=\`disk\`
for ((i=1; i<=$Disk_num; i++))
do
        dev=\`echo "\$disks"|grep "0:\$i\\""|awk -F , '{print \$2}'|tr -d "\\""|awk -F : '{print \$2}'\`
        if [ "x\$dev" = "x" ];then
                echo -e "Null Null" >> /tmp/disk_speed
                continue
        else
                sleep 2
                dd if=\$dev of=/dev/null bs=4096 > /dev/null 2>&1 &
        fi

        iostat -m  3 2 > $dd_tmp  2>&1 &
        sleep 7
        killall  dd >/dev/null 2>&1

        dev_base=\`basename \$dev\`
        disk_read_speed=\`cat $dd_tmp | grep \$dev_base|sed -n 2p|awk '{print \$3}'|awk -F . '{print \$1}'\`

        sleep 2
        dd if=/dev/zero of=\$dev bs=4096 > /dev/null 2>&1 &

        iostat -m  3 2 > $dd_tmp  2>&1 &
        sleep 7
        killall dd >/dev/null 2>&1

        disk_write_speed=\`cat $dd_tmp | grep \${dev_base}|sed -n 2p|awk '{print \$4}'|awk -F . '{print \$1}'\`
        echo  "\$disk_read_speed \$disk_write_speed" >> /tmp/disk_speed
done
EOF
        #fi
        chmod +x $file
        $file &
    fi

    if [ "x$1" = "xget_speed" ]; then
        cat /tmp/disk_speed |sed -n ${2}p
    fi
}


test_mem()
{

    file=/tmp/.aging_mem
    cat << EOF > $file
#!/bin/bash
rm -rf /tmp/mem_aging > /dev/null 2>&1
echo 0 >> /tmp/mem_aging
while true
do
count=0
free=\`free -m|sed -n 2p|awk '{print \$4}'\`
free=\$((\$free-100))
memtester \$free 1 >> /dev/null 2>&1
if [ \$? -ne 0 ]; then
        count=\`cat /tmp/mem_aging\`
        count=\$((\$count+1))
        echo \$count > /tmp/mem_aging
fi
done
EOF
    chmod +x $file
    $file &
    echo `date "+%s"` > /tmp/.jw-aging.mem
}

test_io()
{
    local file
    local disks
    local disk

    sys_part=`mount -l |grep " / " | cut -d ' ' -f 1`
    if [ -L $sys_part ];then
        sys_part=`ls -l $sys_part | awk '{print $NF}'`
    fi
    sys_part=`basename $sys_part`
    SYS_DISK=`echo $sys_part|tr -d [:digit:]`

    #disks=`ls -l /sys/block | grep "sd" | grep -v "$SYS_DISK"|grep -v usb|awk '{print $9}'`
    disks=`disk|awk -F / '{print $NF}'|tr -d \"`
    for disk in $disks
    do
        file=/tmp/.aging_io_$disk
        cat << EOF >$file
#!/bin/bash
while true
do
        if [ ! -b /dev/$disk ]; then
                return 1
        fi
        dd if=/dev/zero of=/dev/$disk bs=1M count=100k > /dev/null 2>&1
        (flock -n 9
                killall dd > /dev/null 2>&1
                sleep 3
        ) 9>>/run/lock/aging_io_lock
        dd if=/dev/$disk of=/dev/null bs=1M count=100k > /dev/null 2>&1
        (flock -n 9
                killall dd > /dev/null 2>&1
                sleep 3
        ) 9>>/run/lock/aging_io_lock
done
EOF
        chmod +x $file
        start-stop-daemon -b -S --exec  $file
    done

    echo `date "+%s"` > /tmp/.jw-aging.io

    #	file=/tmp/.aging_io_mem
    #	cat << EOF >$file
    ##!/bin/bash
    #sleep 10
    #
    #if mount -l | grep -q " $IO_MEM_DIR "; then
    #	umount $IO_MEM_DIR
    #fi
    #rm -rf $IO_MEM_DIR
    #
    #free_mem=\`free -m | grep "Mem" | awk '{ print \$4 }'\`
    #let free_mem-=100
    #if [ \$free_mem -lt 100 ]; then
    #	exit 0
    #fi
    #
    #mkdir $IO_MEM_DIR
    #mount -t tmpfs -o size=\${free_mem}m tmpfs $IO_MEM_DIR
    #
    #while true
    #do
    #	dd if=/dev/zero of=$IO_MEM_DIR/file bs=1M >/dev/null 2>&1
    #	dd if=$IO_MEM_DIR/file of=/dev/null bs=1M >/dev/null 2>&1
    #	sleep 3
    #done
    #EOF
    #	chmod +x $file
    #	$file &
}

test_cpu()
{
    local file
    local cpuid
    local cpuids
    cpuids=`cat /proc/cpuinfo | grep processor | awk '{ print $3 }'`
    for cpuid in $cpuids
    do
        file=/tmp/.aging_cpu_$cpuid
        cat << EOF >$file
#!/bin/bash
yes >/dev/null
EOF
        chmod +x $file
        $file &
    done
}
test_net()
{

    if [ -e /run/lock/jw-aging.lock ]; then
        echo -e "remote"
        return
    fi

    remote_net=0
    local_net=`ifconfig eth0 | grep inet|grep -v inet6|awk '{print $2}' | awk -F . '{print $4}'`

    if [ $local_net -eq 2 ];then
        remote_net=1
    else
        remote_net=2
    fi
    if ! ping -W 3 -c 2 192.13.1.$remote_net > /dev/null 2>&1; then
        echo -e "Null"
        return
    fi

    echo "1"|nc 192.13.1.${remote_net} 21700
    pids=`ps axu|grep "iperf -c"|grep -v grep|awk '{print $2}'`
    for pid in $pids
    do
        kill -9 $pid > /dev/null 2>&1
        kill -9 $pid >/dev/null 2>&1
    done


    for ((i=0; i<$Eth_num; i++))
    do
        file="/tmp/.aging_net_eth$i"
        cat <<EOF >$file
#!/bin/bash
while true
do
        iperf -c 192.13.$(($i+1)).$remote_net -p 50$((remote_net))$(($i+1)) -d -t 600 > /dev/null 2>&1
done
EOF
        chmod +x $file
        $file &
    done

    echo `date "+%s"` > /tmp/.jw-aging.net
}
status_aging_test()
{
    disks=`disk`
    if [ x"$1" = "xio" ]; then
        echo -ne "" > /tmp/disk_aging
        iostat -d -m 1 2 > /tmp/iostat 2>/dev/null
        #		if [ "$Hwtype" = "3U16-STANDARD-SAS" ]; then
        #			i=0
        #			echo "$disks"| while read disk
        #			do
        #				i=$((i+1))
        #				dev=`echo "$disk"|awk -F \/ '{print $3}'|tr -d \"`
        #				if [ "x$dev" = "x" ]; then
        #					echo "Null Null" >> /tmp/disk_aging
        #					continue
        #				fi
        #				cat /tmp/iostat|grep $dev|sed -n 2p|awk '{printf("%d %d\n", $3, $4)}' >> /tmp/disk_aging
        #			done
        #			i=$i
        #			while [ $i -le $Disk_num ]
        #			do
        #				echo "Null Null" >> /tmp/disk_aging
        #				i=$((i+1))
        #			done
        #		else
        for ((i=1; i<=$Disk_num; i++))
        do
            dev=`echo "$disks"|grep "0:$i\""|awk -F , '{print $2}'|tr -d "\""|awk -F : '{print $2}'`
            if [ "x$dev" = "x" ]; then
                echo "Null Null" >> /tmp/disk_aging
                continue
            fi
            dev=`basename $dev`
            cat /tmp/iostat|grep $dev|sed -n 2p|awk '{printf("%d %d\n", $3, $4)}' >> /tmp/disk_aging
        done
        #		fi
        cat /tmp/disk_aging
    elif [ x"$1" = "xnet" ]; then
        sar -n DEV 1 1 > /tmp/net_aging 2>&1
        cat /tmp/net_aging|grep -v lo |sed -e '/平均/d' -e '/Average/d' -e '/^$/d' -e '1,3'd|tr -d [:alpha:]|awk '{printf("%d %d\n",$5/1000,$6/1000)}'
    elif [ x"$1" = "xmem" ]; then
        cat /tmp/mem_aging
    fi
}
stop_aging_test()
{
    if [ x"$1" = "xio" ];then

        pids=`ps axu|grep ".aging_io_sd"|grep -v grep|grep -v jw-aging|awk '{print $2}'`

        for pid in $pids
        do
            kill -9 $pid > /dev/null 2>&1
        done

        killall dd > /dev/null 2>&1
        killall dd > /dev/null 2>&1
        rm -rf /tmp/.aging_io_sd* > /dev/null 2>&1
        rm -rf /tmp/.jw-aging.io > /dev/null 2>&1
    elif [ x"$1" = "xnet" ];then
        pids=`ps aux |grep ".aging_eth"|grep -v grep|grep -v jw-aging|awk '{print $2}'`
        for pid in $pids
        do
            kill -9 $pid > /dev/null 2>&1
        done

        pids=`ps axu|grep "iperf -c"|grep -v grep|awk '{print $2}'`
        for pid in $pids
        do
            kill -9 $pid > /dev/null 2>&1
            kill -9 $pid >/dev/null 2>&1
        done
        local_net=`ifconfig eth0|grep inet|grep -v inet6|awk '{print $2}'|awk -F . '{print $NF}'`
        remote_net=$((3-$local_net))
        echo "2"|nc 192.13.1.$remote_net 21700
        rm -rf /tmp/.aging_net_eth* >/dev/null 2>&1
        rm -rf /tmp.jw-aging.net > /dev/null 2>&1
    elif [ x"$1" = "xmem" ];then
        pid = `ps aux|grep ".aging_mem"|grep -v grep |grep -v jw-aging|awk '{print $2}'`
        kill -9 $pid > /dev/null 2>&1
        killall memtester
        rm -rf /tmp/.aging_mem > /dev/null 2>&1
        rm -rf /tmp/.jw-aging.mem > /dev/null 2>&1
    fi
}

store_to_usb()
{
    usb_disk=""
    usb_parts=""
    disks=`ls -al /sys/block/sd* | awk '{print $9}'`
    for disk in $disks
    do
        removable=`cat $disk/removable`
        if [ "x$removable" = "x1" ]; then
            usb_disk=`echo $disk|awk -F / '{print $NF}'`
            break
        fi
    done

    if [ "x$usb_disk" = "x" ]; then
        echo -e "No usb device, program exit."
        exit 0
    fi

    usb_dir=`mount -l |grep ${usb_disk} | awk '{print $3}'`
    if [ "x$usb_dir" != "x" ]; then
        echo -e "copy logfile to $usb_dir, program exit."
        cp $1 $2 $usb_dir
        exit 0
    else
        usb_parts=`ls -d /sys/block/$usb_disk/sd*|awk -F / '{print $NF}'`
        if [ "x$usb_parts" = "x" ]; then

            echo -e "$usb_disk have no parts, program exit."
            exit 0
        else
            if [ ! -d "/mnt/usb" ];then
                mkdir "/mnt/usb"
            fi
            for usb_part in $usb_parts
            do
                echo "usb_part $usb_part"
                mount /dev/$usb_part /mnt/usb
                echo -e "copy logfile to $usb_part, then program will exit."
                cp $1 $2  "/mnt/usb"
                exit 0
            done
        fi
    fi
}

cpu()
{
    cpu=`mpstat|grep all|awk '{print $NF}'`
    cpu=`echo "100-$cpu"|bc`
    printf %02.2f $cpu
}
cpu_temp()
{
    cpu_t=`cat /sys/bus/platform/devices/nct6106.656/temp17_input`
    value=`echo "$cpu_t / 1000" | bc`
    echo -n "$value"
}
mem()
{
    #info=`sar -u  -r 1 1|sed -n "10p;13p"`
    #cpu=`echo "$info"|sed -n 1p|awk '{print $8}'|awk -F . '{print $1}'`
    #mem=`echo "$info"|sed -n 2p|awk '{print $4}'`
    #echo $((100-$cpu)) $mem
    mem=`free -m | sed -n 2p|awk '{print "total:"$2"M used:"$3"M"}'`
    echo -e $mem
}

free_mem()
{
    free_mem=`free -m|sed -n 2p|awk '{print $4}'`
    echo -e $free_mem
}
fan1()
{
    hwmon=`sys-mon-shell`
    cpu_temp=`echo "$hwmon"|sed -n 13p|awk '{print $1}'`
    chassis_temp=`echo "$hwmon"|sed -n 13p |awk '{print $2}'`
    fan1_speed=`echo "$hwmon"|sed -n 13p|awk '{print $4}'`
    echo -e "fan1:$fan1_speed rpm"
    if [ $fan1_speed -lt 3000 ]; then
        echo -e "false"
    else
        echo -e "true"
    fi
}
fan2()
{
    hwmon=`sys-mon-shell`
    cpu_temp=`echo "$hwmon"|sed -n 13p|awk '{print $1}'`
    chassis_temp=`echo "$hwmon"|sed -n 13p |awk '{print $2}'`
    fan2_speed=`echo "$hwmon"|sed -n 13p|awk '{print $5}'`
    echo -e "fan2:$fan2_speed rpm"
    if [ $fan2_speed -lt 3000 ]; then
        echo -e "false"
    else
        echo -e "true"
    fi
}
power1()
{
    hwmon=`sys-mon-shell`
    power1_vin=`echo "$hwmon"|sed -n 5p|awk '{print $1}'`
    power1_vout=`echo "$hwmon"|sed -n 5p|awk '{print $2}'`
    power1_fan=`echo "$hwmon"|sed -n 5p|awk '{print $3}'`
    power1_amb=`echo "$hwmon"|sed -n 5p|awk '{print $4}'`
    power1_hs=`echo "$hwmon"|sed -n 5p|awk '{print $5}'`
    if [ $power1_vin = "unknown" ];then
        power1_vin=0
    fi
    if [ $power1_vout = "unknown" ];then
        power1_vout=0
    fi
    if [ $power1_fan = "unknown" ];then
        power1_fan=0
    fi
    if [ $power1_amb = "unknown" ]; then
        power1_amb=0
    fi
    if [ $power1_hs = "unknown" ];then
        power1_hs=0
    fi
    printf  "power1 vin:"%-3d"V vout:"%-3d"V fan_speed:"%-5d"rpm amb_temp:"%-2d"℃  hs_temp:"%-2d"℃ \n" $power1_vin $power1_vout $power1_fan $power1_amb $power1_hs
    if [ $power1_vin -lt 120 -o $power1_vin -gt 260 ];then
        echo -e "false"
        return
    fi
    if [ $power1_vout -lt 11 -o $power1_vout -gt 13 ]; then
        echo -e "false"
        return
    fi
    if [ $power1_amb -gt 46 ]; then
        echo -e "false"
        return
    fi

    echo -e "true"


}
power2()
{
    hwmon=`sys-mon-shell`
    power2_vin=`echo "$hwmon"|sed -n 9p|awk '{print $1}'`
    power2_vout=`echo "$hwmon"|sed -n 9p|awk '{print $2}'`
    power2_fan=`echo "$hwmon"|sed -n 9p|awk '{print $3}'`
    power2_amb=`echo "$hwmon"|sed -n 9p|awk '{print $4}'`
    power2_hs=`echo "$hwmon"|sed -n 9p|awk '{print $5}'`
    if [ $power2_vin = "unknown" ];then
        power2_vin=0
    fi
    if [ $power2_vout = "unknown" ];then
        power2_vout=0
    fi
    if [ $power2_fan = "unknown" ];then
        power2_fan=0
    fi
    if [ $power2_amb = "unknown" ]; then
        power2_amb=0
    fi
    if [ $power2_hs = "unknown" ];then
        power2_hs=0
    fi

    printf  "power2 vin:"%-3d"V vout:"%-3d"V fan_speed:"%-5d"rpm amb_temp:"%-2d"℃  hs_temp:"%-2d"℃ \n" $power2_vin $power2_vout $power2_fan $power2_amb $power2_hs
    if [ $power2_vin -lt 120 -o $power2_vin -gt 260 ];then
        echo -e "false"
        return
    fi
    if [ $power2_vout -lt 11 -o $power2_vout -gt 13 ]; then
        echo -e "false"
        return
    fi
    if [ $power2_amb -gt 46 ]; then
        echo -e "false"
        return
    fi

    echo -e "true"

}

net_speed_test_new()
{
    if [ -e /run/lock/jw-aging.lock ]; then
        echo -e "remote"
        return
    fi

    remote_net=0
    local_net=`ifconfig eth0 | grep inet|grep -v inet6|awk '{print $2}' | awk -F . '{print $4}'`

    if [ $local_net -eq 2 ];then
        remote_net=1
    else
        remote_net=2
    fi

    if ! ping -W 3 -c 2 192.13.1.$remote_net > /dev/null 2>&1; then
        echo -e "Null"
        return
    fi

    echo "1"|nc 192.13.1.${remote_net} 21700
    pids=`ps axu|grep "iperf -c"|grep -v grep|awk '{print $2}'`
    for pid in $pids
    do
        kill -9 $pid > /dev/null 2>&1
        kill -9 $pid >/dev/null 2>&1
    done


    for ((i=0; i<$Eth_num; i++))
    do
        file=/tmp/net_eth${i}_speed.sh
        cat <<EOF >$file
#!/bin/bash
iperf -c 192.13.$((i+1)).$remote_net -p 50$((remote_net))$((i+1)) -d -t 15 > /dev/nll 2>&1
EOF
        chmod +x $file
        $file &
    done
    rm -rf $iperf_tmp
    sar -n DEV 5 3 > $iperf_tmp
    for ((i=0; i<$Eth_num; i++))
    do
        speed=`cat $iperf_tmp|grep eth$i|sed -n 2p|tr -d [:alpha:]|awk '{printf("%3d/%3d", $5/1000, $6/1000)}'`
        echo -e "$speed"
    done

    echo "2"|nc 192.13.1.$remote_net 21700

}

net_restory()
{
    eths=`ls /tmp/old/`
    for eth in $eths
    do
        ip=`cat /tmp/old/$eth|awk '{print $2}'|tr -d "addr:"|tr -d "地址:"`
        netmask=`cat /tmp/old/$eth|awk '{print $4}'|awk -F : '{print $2}'`
        if [ -n $netmask ]; then
            netmask="255.255.255.0"
        fi
        ifconfig $eth $ip netmask $netmask
    done
    if [ -f /tmp/route ]; then
        gw=`cat /tmp/route`
        route add default gw $gw
    fi
}
fireware()
{
    pic=`pic-version -d`
    if [ "x$pic" = "xpic" ]; then
        echo -e "no pic"
    else
        echo -e $pic
    fi
}
get_raid()
{
    raid_card=`lspci | grep RAID|awk -F : '{print $3}'`
    if  echo "$raid_card"|grep -i lsi > /dev/null; then
        echo 'lsi'
    elif echo "$raid_card"|grep -i adaptec > /dev/null; then
        echo 'pmc'
    else
        echo 'Null'
    fi
}
net_mac()
{
    mac_info=`ip addr|grep ether|awk '{print $2}'`
    echo "$mac_info"
}
version()
{
    echo $VERSION
}
sysdisk_info()
{
    sysdisk=`mount | grep " / "|awk '{print $1}'| tr -d [:digit:]`
    sysdisk_info=`smartctl -i $sysdisk`

    sysdisk_mode=`echo "$sysdisk_info" | grep "Device Model" | awk -F : '{print $2}'`
    sysdisk_cap=`echo "$sysdisk_info" | grep Capacity | awk -F : '{print $NF}'`
    echo "$sysdisk $sysdisk_mode $sysdisk_cap"
}
sysled_status()
{
    if [ -f /tmp/.jw-aging.sysled ]; then
        echo -n "on"
    else
        echo -n "off"
    fi
}
buzzer_status()
{
    if [ -f /tmp/.jw-aging.buzzer ]; then
        echo -n "on"
    else
        echo -n "off"
    fi
}
led_status()
{
    if [ -f /tmp/.jw-aging.led ]; then
        echo -n "on"
    else
        echo -n "off"
    fi
}
aging_io_time()
{
    if [ -f /tmp/.jw-aging.io ]; then
        echo -n `cat /tmp/.jw-aging.io`
    else
        echo -n "Null"
    fi

}
aging_net_time()
{
    if [ -f /tmp/.jw-aging.net ]; then
        echo -n `cat /tmp/.jw-aging.net`
    else
        echo -n "Null"
    fi
}
aging_mem_time()
{
    if [ -f /tmp/.jw-aging.mem ]; then
        echo -n `cat /tmp/.jw-aging.mem`
    else
        echo -n "Null"
    fi
}
case $1 in
    "version")
        version
        ;;
    "ip_address")
        get_ip
        ;;
    "system_info")
        system_info
        ;;
    "bios_info")
        bios_info
        ;;
    "cpu_info")
        cpu_info
        ;;
    "chipset_info")
        chipset_info
        ;;
    "memory_info")
        memory_info
        ;;
    "eth_info")
        eth_info
        ;;
    "net_info")
        net_info
        ;;
    "sata_info")
        sata_info
        ;;
    "sysdisk_info")
        sysdisk_info
        ;;
    "buzzer_test")
        buzzer_test $2
        ;;
    "sysled_test")
        sysled_test $2
        ;;
    "diskled_test")
        diskled_test $2
        ;;
    "sound")
	sound_test $2
	;;
    "disk_test")
        disk_test $2 $3
        ;;
    "store_to_usb")
        store_to_usb $2 $3
        ;;
    "fireware")
        fireware
        ;;
    "cpu")
        cpu
        ;;
    "cpu_temp")
        cpu_temp
        ;;
    "mem")
        mem
        ;;
    "free_mem")
        free_mem
        ;;
    "fan1")
        fan1
        ;;
    "fan2")
        fan2
        ;;
    "power1")
        power1
        ;;
    "power2")
        power2
        ;;
    "net_speed_test_new")
        net_speed_test_new
        ;;
    "net_restory")
        net_restory
        ;;
    "aging_net_start")
        test_net
        ;;
    "aging_io_start")
        test_io
        ;;
    "aging_mem_start")
        test_mem
        ;;
    "aging_net_stop")
        stop_aging_test net
        ;;
    "aging_mem_stop")
        stop_aging_test mem
        ;;
    "aging_io_stop")
        stop_aging_test io
        ;;
    "aging_io_status")
        status_aging_test io
        ;;
    "aging_mem_status")
        status_aging_test mem
        ;;
    "aging_net_status")
        status_aging_test net
        ;;
    "get_raid")
        get_raid
        ;;
    "net_mac")
        net_mac
        ;;
    "sysled_status")
        sysled_status
        ;;
    "buzzer_status")
        buzzer_status
        ;;
    "led_status")
        led_status
        ;;
    "aging_io_time")
        aging_io_time
        ;;
    "aging_net_time")
        aging_net_time
        ;;
    "aging_mem_time")
        aging_mem_time
        ;;
esac
